generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userName          String         @default("NO_NAME")
  email             String         @unique(map: "user_email_idx")
  emailVerified     DateTime?      @db.Timestamp(6)
  image             String?
  password          String?
  passwordChangedAt DateTime?
  role              Role           @default(USER)
  paymentMethod     PaymentMethod?
  createdAt         DateTime       @default(now()) @db.Timestamp(6)
  updatedAt         DateTime       @updatedAt
  isActive          Boolean        @default(true)
  isEmailVerified   Boolean        @default(false)
  isSuspended       Boolean        @default(false)
  hotels            Hotel[]        @relation("AgentHotels")
}

model Hotel {
  id               String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String          @unique(map: "hotel_official_name_idx")
  slug             String?
  createdAt        DateTime        @default(now()) @db.Timestamp(6)
  updatedAt        DateTime        @updatedAt @db.Timestamp(6)
  status           HotelStatus     @default(DRAFT)
  completionSteps  Json            @default("{}")
  currentStep      Int             @default(1)
  totalSteps       Int             @default(6)
  isFullyCompleted Boolean         @default(false)
  agentId          String          @db.Uuid
  additionalNotes  String?
  amenities        HotelAmenity?
  basicInfo        HotelBasicInfo?
  images           HotelImages[]
  policies         HotelPolicy?
  agent            User            @relation("AgentHotels", fields: [agentId], references: [id])
  rooms            Room[]

  @@index([status], map: "hotel_status")
  @@map("hotels")
}

model HotelBasicInfo {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  hotelId          String    @unique @db.Uuid
  name             String    @unique(map: "hotel_name_idx")
  slug             String    @unique(map: "hotel_slug_idx")
  rating           Decimal   @default(0) @db.Decimal(3, 2)
  hotelType        HotelType
  roomUnitTotal    Int       @default(0)
  acceptedCurrency Currency  @default(NGN)
  address          String
  city             String
  state            String
  country          String
  zipCode          String
  lat              Float?
  lng              Float?
  isCompleted      Boolean   @default(false)
  completedAt      DateTime?
  createdAt        DateTime  @default(now()) @db.Timestamp(6)
  updatedAt        DateTime  @updatedAt @db.Timestamp(6)
  hotel            Hotel     @relation(fields: [hotelId], references: [id], onDelete: Cascade)

  @@map("hotel_basic_info")
}

model HotelPolicy {
  id                        String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  hotelId                   String                @unique @db.Uuid
  isFrontDesk               Boolean               @default(false)
  isFrontDeskEveryDay       Boolean?              @default(false)
  isFrontDeskOpen24Hours    Boolean?              @default(false)
  frontDeskScheduleStartDay Days?
  frontDeskScheduleEndDay   Days?
  frontDeskStartTime        String?
  frontDeskEndTime          String?
  isSelfCheckIn             Boolean
  selfCheckInType           SelfCheckInType?
  checkInStartTime          String
  checkInEndTime            String?
  isOpen24Hours             Boolean?              @default(false)
  isLateCheckIn             Boolean?              @default(false)
  lateCheckInType           LateCheckInFeeType?
  surchargeType             SurchargeType?
  surchargeAmount           Decimal?
  lateCheckInStartTime      String?
  lateCheckInEndTime        String?
  isAdvancedNoticeCheckIn   Boolean?              @default(false)
  advanceNoticeCheckInTime  String?
  checkOutTime              String
  minCheckInAgeAllowed      Int
  isPetAllowed              Boolean
  isPetSurcharged           Boolean?              @default(false)
  petSurchargeAmount        Decimal?
  petSurchargeType          PetSurchargeType?
  petSurchargeDuration      PetFeeDuration?
  isMaxFeePerStay           Boolean?              @default(false)
  maxFeePerStayAmount       Decimal?
  isPetFeeVaried            Boolean?              @default(false)
  allowedPetType            AllowedPetType?
  isPetRestricted           Boolean?              @default(false)
  petRestrictionType        PetRestrictionType[]  @default([])
  isMaxWeightPerPet         Boolean?              @default(false)
  petMaxWeight              Decimal?
  isPetDeposit              Boolean?
  petDepositType            PetFeeDuration?
  petDepositAmount          Decimal?
  isPetCleaningFee          Boolean?              @default(false)
  petCleaningFee            Decimal?
  petFriendlyFeatures       PetFriendlyFeatures[] @default([])
  paymentMethods            PaymentMethod[]
  isDepositRequired         Boolean               @default(false)
  depositAmount             Decimal?
  cancellationPolicy        CancellationPolicy
  cancellationFeeType       CancellationFeeType?
  isTaxIncludedInRoomRates  Boolean
  smokingPolicy             SmokingPolicy         @default(NO_SMOKING)
  hasAdditionalPolicy       Boolean               @default(false)
  additionalPolicy          Json[]                @default([])
  isCompleted               Boolean               @default(false)
  completedAt               DateTime?
  createdAt                 DateTime              @default(now()) @db.Timestamp(6)
  updatedAt                 DateTime              @updatedAt @db.Timestamp(6)
  hotel                     Hotel                 @relation(fields: [hotelId], references: [id], onDelete: Cascade)

  @@map("hotel_policies")
}

model HotelImages {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  hotelId     String    @db.Uuid
  imageType   ImageType
  imageUrl    String
  isCompleted Boolean   @default(false)
  completedAt DateTime?
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  updatedAt   DateTime  @updatedAt @db.Timestamp(6)
  public_id   String
  hotel       Hotel     @relation(fields: [hotelId], references: [id], onDelete: Cascade)

  @@map("hotel_images")
}

model HotelAmenity {
  id                          String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  hotelId                     String                  @unique @db.Uuid
  isWifi                      Boolean
  wifiArea                    WifiAreaType[]
  roomWifiChargeType          HotelAmenityChargeType?
  roomWifiSpeed               WifiSpeedType?
  roomWifiSurchargeAmout      Decimal?
  roomDeviceLimited           Boolean?
  roomWifiSurchargeDuration   WifiSurchargeDuration?
  roomDeviceLimitNumber       Int?
  publicWifiSurchargeAmout    Decimal?
  publicWifiChargeType        HotelAmenityChargeType?
  publicWifiSpeed             WifiSpeedType?
  publicWifiSurchargeDuration WifiSurchargeDuration?
  publicDeviceLimited         Boolean?
  publicDeviceLimitNumber     Int?
  isBreakfast                 Boolean
  breakfastChargeType         HotelAmenityChargeType?
  breakfastSurchargeAmount    Decimal?
  breakfastSchedule           BreakfastSchedule?
  breakfastStartTime          String?
  breakfastEndTime            String?
  isCompleted                 Boolean                 @default(false)
  completedAt                 DateTime?
  createdAt                   DateTime                @default(now()) @db.Timestamp(6)
  updatedAt                   DateTime                @updatedAt @db.Timestamp(6)
  hotel                       Hotel                   @relation(fields: [hotelId], references: [id], onDelete: Cascade)

  @@map("hotel_amenities")
}

model Room {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  hotelId          String             @db.Uuid
  name             String             @unique(map: "room_name_idx")
  roomType         RoomType
  roomClass        RoomClass?
  maxOccupancy     Int
  bedType          BedType
  bedTotal         Int                @default(1)
  totalRooms       Int                @default(1)
  peopleInBaseRate Int                @default(1)
  baseRate         Decimal            @default(0) @db.Decimal(12, 2)
  pricingModel     PricingModelType
  isCompleted      Boolean            @default(false)
  completedAt      DateTime?
  createdAt        DateTime           @default(now()) @db.Timestamp(6)
  updatedAt        DateTime           @updatedAt @db.Timestamp(6)
  amenities        RoomAmenity?
  roomAvailability RoomAvailability[]
  roomImages       RoomImages[]
  hotel            Hotel              @relation(fields: [hotelId], references: [id], onDelete: Cascade)

  @@unique([roomType, roomClass])
  @@map("rooms")
}

model RoomAmenity {
  id               String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  roomId           String               @unique @db.Uuid
  bathroomType     BathroomType
  bathroomNumber   Decimal              @default(1)
  showerType       ShowerType
  roomEssential    RoomEssentials[]
  isTowelProvided  Boolean
  climateControl   ClimateControlType[] @default([])
  airConditionType AirConditioningType?
  heatingType      HeatingType?
  isRoomView       Boolean
  roomViewType     RoomViewType?
  roomSize         Decimal
  roomSizeUnit     RoomSizeUnitType
  isOutDoorSpace   Boolean
  outDoorSpaceType OutDoorSpaceType?
  roomLayout       RoomLayoutType[]     @default([])
  createdAt        DateTime             @default(now()) @db.Timestamp(6)
  updatedAt        DateTime             @updatedAt @db.Timestamp(6)
  room             Room                 @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@map("room_amenities")
}

model RoomImages {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  roomId    String   @db.Uuid
  imageUrl  String
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)
  public_id String
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@map("room_images")
}

model RoomAvailability {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  roomId      String    @db.Uuid
  date        DateTime  @db.Date
  isAvailable Boolean   @default(true)
  inventory   Int?
  price       Decimal?
  currency    String?
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  updatedAt   DateTime  @updatedAt @db.Timestamp(6)
  completedAt DateTime?
  isCompleted Boolean   @default(false)
  room        Room      @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@unique([roomId, date])
  @@map("room_availability")
}

model Country {
  id           String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String  @unique(map: "country_name_idx")
  iso2         String  @unique(map: "country_iso2_idx")
  iso3         String
  phoneCode    String?
  capital      String?
  currency     String?
  currencyName String?
  region       String?
  nationality  String?
  states       State[]
}

model State {
  id          String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  stateId     Int     @unique(map: "state_id_idx")
  stateCode   String?
  countryCode String?
  countryName String?
  countryId   String  @db.Uuid
  cities      City[]
  country     Country @relation(fields: [countryId], references: [id])
}

model City {
  id          String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  cityId      Int     @unique(map: "city_id_idx")
  name        String
  stateId     String  @db.Uuid
  stateCode   String?
  stateName   String?
  stateUqId   Int
  countryName String?
  state       State   @relation(fields: [stateId], references: [id])
}

enum Role {
  USER
  AGENT
  ADMIN
}

enum SelfCheckInType {
  ACCESS_CODE
  KEY_RETRIVAL_INSTRUCTION
  LOCK_BOX
  SMART_LOCK_CODE
  EXPRESS_CHECKIN
}

enum LateCheckInFeeType {
  FREE
  SURCHARGE
}

enum SurchargeType {
  AMOUNT
  PERCENT
  FEE_VARIES
}

enum PetSurchargeType {
  PER_PET
  PER_ACCOMODATION
}

enum PetFeeDuration {
  PER_DAY
  PER_NIGHT
  PER_STAY
  PER_WEEK
}

enum AllowedPetType {
  ONLY_DOGS
  ONLY_CATS
  ONLY_DOGS_AND_CATS
}

enum PetRestrictionType {
  ONLY_SMOKING_ROOMS
  ONLY_SPECIFIC_AREAS
  CANNOT_BE_LEFT_UNATTENDED
  OTHERS
}

enum PetFriendlyFeatures {
  FOOD_AND_WATER_BOWL
  LITTER_BOX
  DOG_EXERCISE_ROOM
  PET_SITTING_SERVICES
  PET_GROOMING_SERVICES
}

enum BedType {
  SINGLE_OR_TWIN
  LARGE_SINGLE_OR_LARGE_TWIN
  DOUBLE
  QUEEN
  KING
  WATER
  BUNK
}

enum PricingModelType {
  PER_DAY
  OCCUPANCY_BASE
}

enum HotelStatus {
  DRAFT
  IN_PROGRESS
  PENDING_REVIEW
  APPROVED
  REJECTED
  ACTIVE
  INACTIVE
}

enum Days {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum Currency {
  NGN
  USD
  EUR
  GBP
}

enum WifiAreaType {
  IN_PUBLIC_AREA
  IN_GUEST_ROOM
}

enum HotelAmenityChargeType {
  FREE
  SURCHARGE
}

enum WifiSpeedType {
  MBPS_25
  MBPS_50
  MBPS_100
  MBPS_200
}

enum WifiSurchargeDuration {
  PER_STAY
  PER_HOUR
  PER_NIGHT
  PER_DAY
  PER_WEEK
}

enum BreakfastSchedule {
  DAILY
  WEEKDAYS
  WEEKENDS
}

enum HotelType {
  HOTEL
  MOTEL
  GUESTHOUSE
  INN
  APARTMENT
}

enum ImageType {
  COVER
  EXTERIOR
  INTERIOR
}

enum HotelCategory {
  BUDGET
  BUSINESS
  LUXURY
  RESORT
  BOUTIQUE
  EXTENDED_STAY
}

enum CancellationPolicy {
  FREE_CANCELLATION
  HOUR_24
  HOUR_48
  HOUR_72
  NO_REFUND
}

enum CancellationFeeType {
  FIRST_NIGHT_PLUS_TAX
  AMOUNT_50
  AMOUNT_100
}

enum PetPolicy {
  NOT_ALLOWED
  ALLOWED_WITH_FEE
  ALLOWED_FREE
}

enum SmokingPolicy {
  NO_SMOKING
  SMOKING_ALLOWED
  DESIGNATED_AREAS
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  CASH
  BANK_TRANSFER
  DIGITAL_WALLET
}

enum RoomClass {
  BASIC
  STANDARD
  DELUXE
  ECONOMY
  FAMILY
  EXECUTIVE
  PRESIDENTIAL
}

enum RoomType {
  DOUBLE_OR_TWIN
  DOUBLE
  SINGLE
  TWIN
  SUITE
  STUDIO
}

enum RateType {
  STANDARD
  WEEKEND
  SEASONAL
  PROMOTIONAL
  CORPORATE
  GROUP
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum BathroomType {
  PRIVATE
  PARTIALLY_OPEN
  SHARED
}

enum ShowerType {
  BATHTUB
  SEPARATE_BATHTUB_AND_SHOWER
  SHOWER
  BATHTUB_OR_SHOWER
}

enum RoomEssentials {
  FREE_TOILETRIES
  SOAP
  SHAMPOO
  TOILET_PAPER
  HAIR_DRYER
}

enum ClimateControlType {
  AIR_CONDITIONING
  HEATING
}

enum AirConditioningType {
  AIR_CONDITIONING
  IN_ROOM_CLIMATE_CONTROL
}

enum HeatingType {
  HEATING
  IN_ROOM_CLIMATE_CONTROL
}

enum RoomViewType {
  BAY
  BEACH
  DESERT
  GOLF
  CITY
  GARDEN
  CANAL
  LAKE
  OCEAN
  PARK
}

enum RoomSizeUnitType {
  SQUARE_FEET
  SQUARE_METER
}

enum OutDoorSpaceType {
  BALCONY
  FURNISHED_BALCONY
  BALCONY_OR_PATIO
  FURNISHED_BALCONY_OR_PATIO
  PATIO
  FURNISHED_PATIO
  DECK
}

enum RoomLayoutType {
  DESK
  SEPARATE_SITTING_AREA
  LAPTOP_FRIENDLY_WORK_SPACE
  PRIVATE_POOL
}
